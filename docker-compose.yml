version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - mynetwork
 
  # reachable on 9092 from the host and on 29092 from inside docker compose
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    expose:
      - "29092"
 
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'
    networks:
      - mynetwork

  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic order-logs  --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
  
  customerservice:
    build:
      context: ./CustomerService
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    depends_on:
      - mongo
    networks:
      - mynetwork

  orderservice:
    build:
      context: ./OrderService
      dockerfile: Dockerfile
    ports:
      - "8082:8080"
    depends_on:
      - customerservice
      - kafka
      - mongo
    environment:
      - KAFKA_BROKER=kafka:9092  
      - CUSTOMERSERVICE_URL=http://customerservice/api/v1/Customer/Validate  
    networks:
      - mynetwork

  apigateway:
    build:
      context: ./APIGateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - customerservice
      - orderservice
    networks:
      - mynetwork
  
  mongo:
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - 27017:27017
  
  
  consumerauditservice:
    build:
      context: ./ConsumerAuditService
      dockerfile: Dockerfile
    ports:
      - "9099:9099"
    depends_on:
      - zookeeper
      - kafka
      - customerservice
      - orderservice
      - mongo
    environment:
      - KAFKA_BROKER=kafka:9092
    networks:
      - mynetwork
        
    
volumes:
  mongo-data:

networks:
  mynetwork:
    driver: bridge
